%clear
%clc

arr = [2.91	6.97	11.5	16.33	21.16	25.98	30.8	35.62	40.43	45.23	50.04	54.84	59.64	64.44	69.23	71.12	71.85	72.11	72.06	72.01	71.97	71.93	71.89	71.85	71.8	71.76	71.71	71.66	71.62	71.57	71.52	71.48	71.43	71.39	71.36	71.33	71.29	71.27	71.25	71.24	71.23	71.23	71.23	71.24	71.25	71.27	71.29	71.31	71.34	71.38	71.42	71.46	71.5	71.55	71.6	71.67	71.73	71.81	71.9	71.99	72.1	72.2	72.3	72.42	72.54	72.68	72.82	73	73.17	73.39	73.6	73.86	74.1	74.41	74.71	75.08	75.45	75.91	76.35	76.9	77.41	78.04	78.63	79.34	80	80.79	81.52	82.39	83.19	83.92	84.56	85.05	85.44	85.83	85.94	86.05	85.87	85.69	85.19	84.7	83.87	83.04	81.86	80.68	79.35	78.02	76.61	75.2	73.55	72.07	70.34	68.79	66.99	65.38	63.52	61.86	59.95	58.26	56.31	54.58	52.58	50.82	48.78	46.98	45.18	43.34	41.5	39.62	37.74	35.81	33.88	31.91	29.93	27.93	25.93	23.92	21.91	20.18	18.2	16.21	14.29	12.36	10.52	8.51	6.78	4.9	3.31	1.57	0.12	-1.47	-2.8	-4.27	-5.73	-7.08	-8.43	-9.55	-10.79	-11.83	-12.79	-13.75	-14.64	-15.53	-16.34	-17.15	-17.87	-18.59	-19.22	-19.84	-20.33	-20.86	-21.44	-21.89	-22.39	-22.78	-23.21	-23.56	-23.95	-24.27	-24.64	-24.96	-25.32	-25.64	-26.01	-26.38	-26.75	-27.08	-27.41	-27.73	-28.05	-28.36	-28.66	-28.94	-29.22	-29.46	-29.7	-29.88	-30.07	-30.2	-30.32	-30.38	-30.44	-30.46	-30.45	-30.42	-30.34	-30.23	-30.08	-29.89	-29.67	-29.45	-29.15	-28.85	-28.48	-28.11	-27.67	-27.11	-26.59	-26.07	-25.46	-24.86	-24.17	-23.51	-22.74	-22	-21.11	-20.3	-19.34	-18.46	-17.41	-16.45	-15.42	-14.39	-13.17	-12.06	-10.74	-9.55	-8.15	-6.88	-5.62	-4.27	-2.92	-1.51	-0.09	1.39	2.87	4.4	5.94	7.52	9.1	10.74	12.37	14.05	15.74	17.69	19.41	21.4	23.17	25.21	27.01	29.1	30.94	33.07	34.95	37.12	39.03	41.23	43.16	45.38	47.33	49.28	51.23	53.19	55.12	57.06	58.95	60.84	62.66	64.47	66.18	67.88	69.46	71.03	72.32	73.71	75.15	76.31	77.43	78.3	79.08	79.62	80.04	80.26	80.48	80.39	80.31	79.98	79.64	79.24	78.68	78.08	77.49	76.89	76.29	75.75	75.21	74.76	74.31	73.83	73.48	73.09	72.81	72.53	72.3	72.11	71.93	71.74	71.6	71.46	71.35	71.24	71.17	71.1	71.07	71.04	71.03	71.03	71.03	71.05	71.09	71.12	71.17	71.22	71.28	71.33	71.41	71.48	71.57	71.65	71.76	71.87	72.01	72.14	72.3	72.45	72.63	72.79	72.98	73.15	73.33	73.5	73.67	73.82	73.97	74.09	74.21	74.3	74.4	74.46	74.52	74.55	74.59	74.6	74.62	74.63	74.64	74.64	74.64	74.65	74.65	74.65	74.64	74.63	74.62	74.61	74.59	74.56	74.53	74.49	74.45	74.41	74.36	74.31	74.26	74.21	74.17	74.12	74.07	74.02	73.97	73.93	73.88	73.83	73.79	73.75	73.7	73.66	73.61	73.57	73.53	73.48	73.44	73.41	73.38	73.35	73.32	73.31	73.29	73.28	73.27	73.26	73.26	73.25	73.25	73.25	73.25	73.25	73.25	73.25	73.25	73.25	73.25	73.25	73.25	73.25	73.26	73.26	73.26	73.27	73.28	73.29	73.3	73.32	73.33	73.35	73.36	73.38	73.4	73.41	73.43	73.44	73.45	73.46	73.46	73.46	73.46	73.45	73.45	73.43	73.42	73.41	73.4	73.38	73.37	73.36	73.35	73.35	73.34	73.34	73.34	73.34	73.33	73.32	73.32	73.32	73.31	73.3	73.29	73.29	73.28	73.26	73.25	73.23	73.21	73.2	73.18	73.16	73.15	73.14	73.13	73.12	73.11	73.1	73.09	73.08	73.07	73.07	73.06	73.06	73.06	73.06	73.06	73.06	73.06	73.06	73.05	73.05	73.05	73.04	73.04	73.03	73.03	73.03	73.03	73.03	73.03	73.03	73.03	73.03	73.03	73.04	73.04	73.05	73.05	73.05	73.05	73.05	73.04	73.04	73.03	73.03	73.03	73.02	73.02	73.01	73.01	73.01	73.01	73.01	73.01	73.02	73.02	73.03	73.04	73.04	73.05	73.06	73.07	73.08	73.1	73.11	73.12	73.13	73.13	73.14	73.14	73.15	73.15	73.15	73.15	73.15	73.15	73.15	73.14	73.14	73.14	73.14	73.14	73.14	73.15	73.15	73.16	73.16	73.16	73.17	73.17	73.18	73.19	73.19	73.2	73.21	73.21	73.22	73.23	73.24	73.24	73.26	73.27	73.28	73.29	73.31	73.32	73.33	73.35	73.36	73.37	73.38	73.4	73.41	73.42	73.44	73.45	73.45	73.46	73.47	73.48	73.48	73.49	73.49	73.49	73.5];
j = 1;
k = 1;
for i = 2:length(arr)-1
    if ((arr(i-1)<arr(i)) &&( arr(i)>(arr(i+1)))) %this finds peaks but is acutally the start of the ROM
        Trough(j) = arr(i);
        j = j+1;
    end
    if ((arr(i-1)>arr(i)) &&( arr(i)<(arr(i+1)))) %Finds troughs but actually peak of ROM
        Peak(k) = arr(i);
        k = k+1;
    end
    
end
disp(Peak);
disp(Trough);


%%
PeakIndex = find(arr == Peak);

up = PeakIndex;
down = PeakIndex;

ad = arr(down);
au = arr(up);
dataCount = 0;

%%
while (ad > -10)
    %if ((abs((arr(down) - arr(down - 1))) < 0.5)&&(arr(down) < 1))
    if ((abs((arr(down) - arr(down + 1))) <= 0.1))
        if (dataCount == 3)
            trough1 = arr(down);
            indices1 = down+1;
            L_indice = down+1;
            disp("Left: ");
            disp(trough1);
            disp(indices1);
            dataCount=0;
            break;
        else
            dataCount = dataCount + 1;
        end
    end
    down = down - 1;
    ad = arr(down);
end


while (au > -10)
    
    %if ((abs((arr(up+1) - arr(up))) < 0.5)&&(arr(up)<1))
    if ((abs((arr(up) - arr(up-1))) <= 0.1))
        if(dataCount == 3)
            trough2 = arr(up);
            indices2 = up-1;
            R_indice = up-1;
            disp("Right: ");
            disp(trough2);
            disp(indices2);
            break;
        else
            dataCount = dataCount +1;
        end
    end
    
    up = up + 1;
    au = arr(up);
end